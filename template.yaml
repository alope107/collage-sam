AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  batch-attempt

  Attempting to use AWS Batch from CloudFormation

  Adapted from Hello World! From https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/sample-templates-services-us-west-2.html#w4ab1c35c58c13b9


Resources:
  VPC:
    Type: "AWS::EC2::VPC"
    Properties:
      CidrBlock : "10.0.0.0/16" # Reserves 10.0.0.0 through 10.0.255.255 for the VPC
      # Importantly, 10.0.0.0/8 is reserved generally for internal networks, so this shouldn't cause any overlap with anything on the public internet
      EnableDnsSupport: true # Needed if we want to be able to make requests to external websites. This may actually not be necessary for our use case, will revisit later.
      EnableDnsHostnames: true
  InternetGateway:
    Type: "AWS::EC2::InternetGateway" # VPCs don't have internet access by default
  RouteTable: # This is later going to be used for allowing subnets to route through the internet gateway
    Type: "AWS::EC2::RouteTable"
    Properties:
      VpcId: !Ref VPC
  VPCGatewayAttachment:
    Type: "AWS::EC2::VPCGatewayAttachment" # The VPC and the gateway need to be connected for it to be able to be used
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway
  SecurityGroup:
    Type: "AWS::EC2::SecurityGroup" # A security group is basically a firewall. We're going to use it later to open up SSH access.
      Properties:              
        GroupDescription: "EC2 Security Group for instances launched in the VPC by Batch"
        VpcId: !Ref VPC
  Subnet:
    Type: "AWS::EC2::Subnet" # The subnet is partitioned off within the VPC. I think this will be used by the EC2 instances used by Batch.
    Properties:
      CidrBlock: "10.0.0.0/24" # The 24 most significant bits are frozen, leaving 10.0.0.0 - 10.0.0.255 for the subnet
      VpcId: !Ref VPC
      MapPublicIpOnLaunch: true
  Route: 
    Type: "AWS::EC2::Route",
    Properties: 
      RouteTableId: !Ref RouteTable
      DestinationCidrBlock: "0.0.0.0/0" # Routes everthing to the public internet EXCEPT for the implicit routes created by the VPC
      GatewayId: !Ref InternetGateway
  SubnetRouteTableAssociation:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      RouteTableId: !Ref RouteTable
      SubnetId: !Ref Subnet
  BatchServiceRole: # Allows the batch service to assume the typical service role
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
            - Effect: "Allow"
              Principal:
                Service: "batch.amazonaws.com"
              Action: "sts:AssumeRole"
      ManagedPolicyArns: 
        - "arn:aws:iam::aws:policy/service-role/AWSBatchServiceRole"
  IamInstanceProfile: # Profiles are the main way that roles get associated with specific EC2 instances.
    Type: "AWS::IAM::InstanceProfile"
    Properties:
      Roles: # Needs a list, but only one role can be attached :/
       - !Ref "EcsInstanceRole"
  EcsInstanceRole: # Role that will be used for EC2 instances within an ECS cluster
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2008-10-17"
        Statement:
            - Sid: "" # Sid is normally a human readable ID. It seems like it's unecessary here? Will eventually experiment with removing it.
              Effect: "Allow"
              Principal:
                Service: "ec2.amazonaws.com"
              Action: "sts:AssumeRole"
      ManagedPolicyArns: 
        - "arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceforEC2Role"
    "JobDefinition" : {
      "Type" : "AWS::Batch::JobDefinition",
      "Properties" : {
        "Type" : "container",
        "ContainerProperties" : {
          "Image" : { 
	    "Fn::Join": [ "", [ "137112412989.dkr.ecr.", { "Ref" : "AWS::Region" }, ".amazonaws.com/amazonlinux:latest" ]] 
	  },
          "Vcpus" : 2,
          "Memory" : 2000,
          "Command" : [ "echo", "Hello world" ]
        },
        "RetryStrategy" : {
          "Attempts" : 1
        }
      }
    },
    "JobQueue" : {
      "Type" : "AWS::Batch::JobQueue",
      "Properties" : {
        "Priority" : 1,
        "ComputeEnvironmentOrder" : [
          {
            "Order" : 1,
            "ComputeEnvironment" : { "Ref" : "ComputeEnvironment" }
          }
        ]
      }
    },
    "ComputeEnvironment" : {
      "Type" : "AWS::Batch::ComputeEnvironment",
      "Properties" : {
        "Type" : "MANAGED",
        "ComputeResources" : {
          "Type" : "EC2",
          "MinvCpus" : 0,
          "DesiredvCpus" : 0,
          "MaxvCpus" : 64,
          "InstanceTypes" : [
            "optimal"
          ],
          "Subnets" : [{ "Ref" : "Subnet" }],
          "SecurityGroupIds" : [{ "Ref" : "SecurityGroup" }],
          "InstanceRole" : { "Ref" : "IamInstanceProfile" }
        },
        "ServiceRole" : { "Ref" : "BatchServiceRole" }
      }
    }
  },
  "Outputs" : {
    "ComputeEnvironmentArn" : {
      "Value" : { "Ref" : "ComputeEnvironment" }
    },
    "JobQueueArn" : {
      "Value" : { "Ref" : "JobQueue" }
    },
    "JobDefinitionArn": {
      "Value" : { "Ref" : "JobDefinition" }
    }
  }
}