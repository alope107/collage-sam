AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  batch-attempt

  Attempting to use AWS Batch from CloudFormation

  Adapted from Hello World! From https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/sample-templates-services-us-west-2.html#w4ab1c35c58c13b9

# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Timeout: 3
    MemorySize: 128
  Api:
    Cors:
      AllowMethods: "'GET,POST,OPTIONS'"
      AllowHeaders: "'content-type'"
      AllowOrigin: "'*'"
      AllowCredentials: "'*'"
    BinaryMediaTypes:
      - "multipart/form-data"

Resources:
  ### LAMBDA ###
  RequestJobFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: request_job/
      Handler: app.lambda_handler
      Runtime: python3.9
      Architectures:
        - x86_64
      Events:
        RequestJob:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            Path: /request
            Method: ANY
      Environment:
        Variables:
          RECAPTCHA_SECRET: dummy
          RECAPTCHA_SECRET_ARN: !Ref RecaptchaKeySecret
          INPUT_BUCKET: !Ref InputOutputBucket
          JOB_DEFINITION: !Ref JobDefinition
          JOB_QUEUE: !Ref JobQueue
      Policies:
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action: 
                - secretsmanager:GetSecretValue
              Resource: !Ref RecaptchaKeySecret
            - Effect: Allow
              Action:
                - s3:PutObject
                # Get and List may not be needed. Will possibly remove later.
                - s3:GetObject
                - s3:ListBucket
              Resource:
                - !Sub "arn:aws:s3:::${InputOutputBucket}/*"
            - Effect: Allow
              Action:
                - batch:SubmitJob
              Resource:
              - !Ref JobDefinition
              - !Ref JobQueue
  StartJobFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: start_job/
      Handler: app.lambda_handler
      Runtime: python3.9
      Architectures:
        - x86_64
      Environment:
        Variables:
          JOB_DEFINITION: !Ref JobDefinition
          JOB_QUEUE: !Ref JobQueue
      Events:
        InputUploaded:
          Type: S3
          Properties:
            Bucket: !Ref InputOutputBucket
            Events:
              - "s3:ObjectCreated:*"
            Filter:
              S3Key:
                Rules:
                  - Name: "prefix"
                    Value: "input/"
      Policies:
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - batch:SubmitJob
              Resource:
              - !Ref JobDefinition
              - !Ref JobQueue
  RecaptchaKeySecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: RecaptchaKeySecret
  InputOutputBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "collage-${AWS::AccountId}-${AWS::Region}"
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        IgnorePublicAcls: true
        BlockPublicPolicy: false
        RestrictPublicBuckets: false
      CorsConfiguration:
        CorsRules:
          - AllowedOrigins: ["*"] # TODO(auberon): Make this configurable.
            AllowedMethods: ["GET"]
            AllowedHeaders: ["*"]
            MaxAge: 3000
  InputOutputBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref InputOutputBucket
      PolicyDocument:
        Statement:
          - Sid: PublicReadForOutputPrefix
            Effect: Allow
            Principal: "*"
            Action:
              - "s3:GetObject"
            Resource: !Sub "${InputOutputBucket.Arn}/output/*"

  ### BATCH ###
  VPC:
    Type: "AWS::EC2::VPC"
    Properties:
      CidrBlock : "10.0.0.0/16" # Reserves 10.0.0.0 through 10.0.255.255 for the VPC
      # Importantly, 10.0.0.0/8 is reserved generally for internal networks, so this shouldn't cause any overlap with anything on the public internet
      EnableDnsSupport: true # Needed if we want to be able to make requests to external websites. This may actually not be necessary for our use case, will revisit later.
      EnableDnsHostnames: true
  InternetGateway:
    Type: "AWS::EC2::InternetGateway" # VPCs don't have internet access by default
  RouteTable: # This is later going to be used for allowing subnets to route through the internet gateway
    Type: "AWS::EC2::RouteTable"
    Properties:
      VpcId: !Ref VPC
  VPCGatewayAttachment:
    Type: "AWS::EC2::VPCGatewayAttachment" # The VPC and the gateway need to be connected for it to be able to be used
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway
  SecurityGroup:
    Type: "AWS::EC2::SecurityGroup" # A security group is basically a firewall. We're going to use it later to open up SSH access.
    Properties:              
      GroupDescription: "EC2 Security Group for instances launched in the VPC by Batch"
      VpcId: !Ref VPC
  Subnet:
    Type: "AWS::EC2::Subnet" # The subnet is partitioned off within the VPC. I think this will be used by the EC2 instances used by Batch.
    Properties:
      CidrBlock: "10.0.0.0/24" # The 24 most significant bits are frozen, leaving 10.0.0.0 - 10.0.0.255 for the subnet
      VpcId: !Ref VPC
      MapPublicIpOnLaunch: true
  Route: 
    Type: "AWS::EC2::Route"
    Properties: 
      RouteTableId: !Ref RouteTable
      DestinationCidrBlock: "0.0.0.0/0" # Routes everthing to the public internet EXCEPT for the implicit routes created by the VPC
      GatewayId: !Ref InternetGateway
  SubnetRouteTableAssociation:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      RouteTableId: !Ref RouteTable
      SubnetId: !Ref Subnet
  BatchServiceRole: # Allows the batch service to assume the typical service role
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
            - Effect: "Allow"
              Principal:
                Service: "batch.amazonaws.com"
              Action: "sts:AssumeRole"
      ManagedPolicyArns: 
        - "arn:aws:iam::aws:policy/service-role/AWSBatchServiceRole"
  IamInstanceProfile: # Profiles are the main way that roles get associated with specific EC2 instances.
    Type: "AWS::IAM::InstanceProfile"
    Properties:
      Roles: # Needs a list, but only one role can be attached :/
       - !Ref "EcsInstanceRole"
  EcsInstanceRole: # Role that will be used for EC2 instances within an ECS cluster
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2008-10-17"
        Statement:
            - Sid: "" # Sid is normally a human readable ID. It seems like it's unecessary here? Will eventually experiment with removing it.
              Effect: "Allow"
              Principal:
                Service: "ec2.amazonaws.com"
              Action: "sts:AssumeRole"
      ManagedPolicyArns: 
        - "arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceforEC2Role"
  ECSTaskRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service: "ecs-tasks.amazonaws.com"
            Action: "sts:AssumeRole"
      Policies:
        - PolicyName: "S3AccessPolicy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Sid: "ReadInput"
                Effect: "Allow"
                Action:
                  - "s3:GetObject"
                Resource:
                  # TODO(auberon): Figure out better way to get bucket name without circular dependency
                  - !Sub "arn:aws:s3:::collage-${AWS::AccountId}-${AWS::Region}/input/*"
              - Effect: "Allow"
                Action:
                  - "s3:PutObject"
                Resource:
                  # TODO(auberon): Figure out better way to get bucket name without circular dependency
                  - !Sub "arn:aws:s3:::collage-${AWS::AccountId}-${AWS::Region}/output/*"
  JobDefinition: # Defines what running a single job looks like
    Type: "AWS::Batch::JobDefinition"
    Properties:
      Type: "container"
      ContainerProperties:
        # TODO(auberon): Make image configurable
        Image: "redcliffesalaman/collage-aws:latest"
        Vcpus: 4
        Memory: 2000
        JobRoleArn: !Ref ECSTaskRole
        ResourceRequirements:
          - Type: "GPU"
            Value: 1
      RetryStrategy:
        Attempts: 1
  JobQueue:
    Type: "AWS::Batch::JobQueue"
    Properties:
      Priority: 1
      ComputeEnvironmentOrder:
          - Order: 1
            ComputeEnvironment: !Ref ComputeEnvironment
  GpuLaunchTemplate:
    Type: "AWS::EC2::LaunchTemplate"
    Properties:
      LaunchTemplateName: "MyGpuLaunchTemplate"
      LaunchTemplateData:
        # Image selected using
        # aws ssm get-parameter --name /aws/service/ecs/optimized-ami/amazon-linux-2/gpu/recommended --region us-west-1 --output json
        # TODO(auberon): Make configurable
        ImageId: "ami-0a40523920cc84619"
        SecurityGroupIds: 
          - !Ref SecurityGroup
  ComputeEnvironment:
    Type: "AWS::Batch::ComputeEnvironment"
    Properties:
      Type: "MANAGED"
      ComputeResources:
        Type: "EC2" # WE're going to use EC2 instead of Faergate because later we'll need GPUs
        MinvCpus: 0 # Will spin down to zero if no jobs
        DesiredvCpus: 0
        MaxvCpus: 4 # Maximum one concurrent job 
        InstanceTypes:
          - "g4dn.xlarge" # Smallest CUDA GPU instance. Four vCPUs, one T4 GPU
        LaunchTemplate:
          LaunchTemplateId: !Ref GpuLaunchTemplate
          Version: !GetAtt GpuLaunchTemplate.LatestVersionNumber
        Subnets:
          - !Ref Subnet
        SecurityGroupIds:
          - !Ref SecurityGroup
        InstanceRole: !Ref IamInstanceProfile
      ServiceRole: !Ref BatchServiceRole

Outputs: #Outputs shown on command line and in console.
  ### LAMBDA ###
  # ServerlessRestApi is an implicit API created out of Events key under Serverless::Function
  # Find out more about other implicit resources you can reference within SAM
  # https://github.com/awslabs/serverless-application-model/blob/master/docs/internals/generated_resources.rst#api
  RequestJobApi:
    Description: "API Gateway endpoint URL for Prod stage for Request Job function"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/request/"
  RequestJobFunction:
    Description: "Request Job Lambda Function ARN"
    Value: !GetAtt RequestJobFunction.Arn
  RequestJobFunctionIamRole:
    Description: "Implicit IAM Role created for Request Job function"
    Value: !GetAtt RequestJobFunctionRole.Arn
  InputOutputBucket:
    Description: "Bucket Name for input and output"
    Value: !Ref InputOutputBucket

  ### BATCH ###
  ComputeEnvironmentArn:
    Value: !Ref ComputeEnvironment
  JobQueueArn:
    Value: !Ref JobQueue
  JobDefinitionArn:
    Value: !Ref JobDefinition